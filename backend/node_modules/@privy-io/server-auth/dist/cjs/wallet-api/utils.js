"use strict";var e=require("@noble/curves/p256"),r=require("@noble/hashes/sha256"),t=require("canonicalize"),a=require("../constants.js"),i=require("../errors.js"),o=require("../paths.js");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var d=/*#__PURE__*/n(t);const l=e=>Buffer.from(d.default(e)),p=(t,a)=>{let i=e.p256.sign(r.sha256(t),a).toDERRawBytes();return Buffer.from(i)},s=({method:e,url:r,body:t,appId:a,idempotencyKeyHeader:i})=>{let o={version:1,method:e,url:r,body:t,headers:{"privy-app-id":a,...i}};return l(o)},u=({method:e,url:r,body:t,appId:a,idempotencyKeyHeader:i,authorizationPrivateKey:o})=>{if("bigint"!=typeof o)return;let n=s({method:e,url:r,body:t,appId:a,idempotencyKeyHeader:i});return p(n,o).toString("base64")};exports.createAuthorizationSignatureHeader=({method:e,body:r,url:t,appId:a,idempotencyKeyHeader:i,authorizationPrivateKey:o})=>{let n=u({method:e,body:r,url:t,appId:a,idempotencyKeyHeader:i,authorizationPrivateKey:o});if(n)return{"privy-authorization-signature":n}},exports.extractIdempotencyKeyHeader=e=>{if(void 0!==e.idempotencyKey)return{"privy-idempotency-key":e.idempotencyKey}},exports.extractWalletIdentifier=e=>{if("walletId"in e)return{wallet_id:e.walletId};if("address"in e&&"chainType"in e)return{address:e.address,chain_type:e.chainType};throw new i.PrivyClientError("Invalid RPC payload. Must include `address` and `chainType` or `walletId`.")},exports.formatAuthorizationSignatureRequest=s,exports.inferRpcPath=e=>{let r;if("walletId"in e)r=o.getWalletApiRpcPath(e.walletId);else{if(!("address"in e)||!("chainType"in e))throw new i.PrivyClientError("Invalid RPC payload. Must include `address` and `chainType` or `walletId`.");r=o.getDelegatedActionsRpcPath()}return r},exports.normalizeP256PrivateKeyToScalar=r=>{let t=r.replace(a.AUTHORIZATION_PRIVATE_KEY_PREFIX,"").replace(a.WALLET_API_PRIVATE_KEY_PREFIX,""),o=Buffer.from(t,"base64"),n=o.indexOf(Buffer.from([4,32]));if(-1===n)throw new i.PrivyClientError("Invalid wallet authorization private key");let d=o.subarray(n+2,n+34);return e.p256.utils.normPrivateKeyToScalar(d)},exports.serializePayloadToBuffer=l,exports.signAuthorizationSignatureRequest=u,exports.signWithP256=p;
