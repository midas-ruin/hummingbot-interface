"use strict";var a=require("../../errors.js"),e=require("../utils.js");require("@noble/curves/p256"),require("@noble/hashes/sha256"),require("canonicalize"),require("../../constants.js"),require("../../paths.js");exports.EthereumRpcApi=class{async signMessage(a){let t=e.inferRpcPath(a),i=e.extractWalletIdentifier(a),r={};r=a.message instanceof Uint8Array?{message:Buffer.from(a.message).toString("hex"),encoding:"hex"}:{message:a.message,encoding:"utf-8"};let n={...i,method:"personal_sign",params:r},s=e.extractIdempotencyKeyHeader(a),o=e.createAuthorizationSignatureHeader({method:"POST",url:this.api.baseURL+t,body:n,appId:this.appId,idempotencyKeyHeader:s,authorizationPrivateKey:this.authorizationPrivateKey}),{data:d}=await this.api.post(t,n,{headers:{...o,...s}});return{signature:d.data.signature,encoding:d.data.encoding}}async secp256k1Sign(a){let t=e.inferRpcPath(a),i={...e.extractWalletIdentifier(a),method:"secp256k1_sign",params:{hash:a.hash}},r=e.extractIdempotencyKeyHeader(a),n=e.createAuthorizationSignatureHeader({method:"POST",url:this.api.baseURL+t,body:i,appId:this.appId,idempotencyKeyHeader:r,authorizationPrivateKey:this.authorizationPrivateKey}),{data:s}=await this.api.post(t,i,{headers:{...n,...r}});return{signature:s.data.signature,encoding:s.data.encoding}}async signTypedData(a){let t=e.inferRpcPath(a),i={...e.extractWalletIdentifier(a),method:"eth_signTypedData_v4",params:{typed_data:{primary_type:a.typedData.primaryType,domain:a.typedData.domain,types:a.typedData.types,message:a.typedData.message}}},r=e.extractIdempotencyKeyHeader(a),n=e.createAuthorizationSignatureHeader({method:"POST",url:this.api.baseURL+t,body:i,appId:this.appId,idempotencyKeyHeader:r,authorizationPrivateKey:this.authorizationPrivateKey}),{data:s}=await this.api.post(t,i,{headers:{...n,...r}});return{signature:s.data.signature,encoding:s.data.encoding}}async signTransaction(a){let t=e.inferRpcPath(a),i={...e.extractWalletIdentifier(a),method:"eth_signTransaction",params:{transaction:{from:a.transaction.from,to:a.transaction.to,nonce:a.transaction.nonce,chain_id:a.transaction.chainId,data:a.transaction.data,value:a.transaction.value,type:a.transaction.type,gas_limit:a.transaction.gasLimit,gas_price:a.transaction.gasPrice,max_fee_per_gas:a.transaction.maxFeePerGas,max_priority_fee_per_gas:a.transaction.maxPriorityFeePerGas}}},r=e.extractIdempotencyKeyHeader(a),n=e.createAuthorizationSignatureHeader({method:"POST",url:this.api.baseURL+t,body:i,appId:this.appId,idempotencyKeyHeader:r,authorizationPrivateKey:this.authorizationPrivateKey}),{data:s}=await this.api.post(t,i,{headers:{...n,...r}});return{signedTransaction:s.data.signed_transaction,encoding:s.data.encoding}}async sendTransaction(t){let i=e.inferRpcPath(t),r={...e.extractWalletIdentifier(t),method:"eth_sendTransaction",caip2:t.caip2,params:{transaction:{from:t.transaction.from,to:t.transaction.to,nonce:t.transaction.nonce,chain_id:t.transaction.chainId,data:t.transaction.data,value:t.transaction.value,type:t.transaction.type,gas_limit:t.transaction.gasLimit,gas_price:t.transaction.gasPrice,max_fee_per_gas:t.transaction.maxFeePerGas,max_priority_fee_per_gas:t.transaction.maxPriorityFeePerGas}}},n=e.extractIdempotencyKeyHeader(t),s=e.createAuthorizationSignatureHeader({method:"POST",url:this.api.baseURL+i,body:r,appId:this.appId,idempotencyKeyHeader:n,authorizationPrivateKey:this.authorizationPrivateKey}),{data:o}=await this.api.post(i,r,{headers:{...s,...n}});if(o.data)return{hash:o.data.hash,caip2:o.data.caip2};if(o.error)throw new a.PrivyApiError(o.error.code,null,o.error.message);throw Error("Unexpected API response to eth_sendTransaction")}constructor({appId:a,api:e,authorizationPrivateKey:t}){this.authorizationPrivateKey=null,this.api=e,this.appId=a,t&&(this.authorizationPrivateKey=t)}};
