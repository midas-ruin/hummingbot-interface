import{p256 as e}from"@noble/curves/p256";import{sha256 as r}from"@noble/hashes/sha256";import t from"canonicalize";import{AUTHORIZATION_PRIVATE_KEY_PREFIX as a,WALLET_API_PRIVATE_KEY_PREFIX as i}from"../constants.mjs";import{PrivyClientError as o}from"../errors.mjs";import{getWalletApiRpcPath as d,getDelegatedActionsRpcPath as n}from"../paths.mjs";const l=e=>Buffer.from(t(e)),p=(t,a)=>{let i=e.sign(r(t),a).toDERRawBytes();return Buffer.from(i)},y=r=>{let t=r.replace(a,"").replace(i,""),d=Buffer.from(t,"base64"),n=d.indexOf(Buffer.from([4,32]));if(-1===n)throw new o("Invalid wallet authorization private key");let l=d.subarray(n+2,n+34);return e.utils.normPrivateKeyToScalar(l)},s=e=>{if(void 0!==e.idempotencyKey)return{"privy-idempotency-key":e.idempotencyKey}},m=e=>{let r;if("walletId"in e)r=d(e.walletId);else{if(!("address"in e)||!("chainType"in e))throw new o("Invalid RPC payload. Must include `address` and `chainType` or `walletId`.");r=n()}return r},u=e=>{if("walletId"in e)return{wallet_id:e.walletId};if("address"in e&&"chainType"in e)return{address:e.address,chain_type:e.chainType};throw new o("Invalid RPC payload. Must include `address` and `chainType` or `walletId`.")},f=({method:e,url:r,body:t,appId:a,idempotencyKeyHeader:i})=>{let o={version:1,method:e,url:r,body:t,headers:{"privy-app-id":a,...i}};return l(o)},h=({method:e,url:r,body:t,appId:a,idempotencyKeyHeader:i,authorizationPrivateKey:o})=>{if("bigint"!=typeof o)return;let d=f({method:e,url:r,body:t,appId:a,idempotencyKeyHeader:i});return p(d,o).toString("base64")},c=({method:e,body:r,url:t,appId:a,idempotencyKeyHeader:i,authorizationPrivateKey:o})=>{let d=h({method:e,body:r,url:t,appId:a,idempotencyKeyHeader:i,authorizationPrivateKey:o});if(d)return{"privy-authorization-signature":d}};export{c as createAuthorizationSignatureHeader,s as extractIdempotencyKeyHeader,u as extractWalletIdentifier,f as formatAuthorizationSignatureRequest,m as inferRpcPath,y as normalizeP256PrivateKeyToScalar,l as serializePayloadToBuffer,h as signAuthorizationSignatureRequest,p as signWithP256};
