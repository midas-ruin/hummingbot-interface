import{PrivyApiError as a}from"../../errors.mjs";import{inferRpcPath as t,extractWalletIdentifier as e,extractIdempotencyKeyHeader as i,createAuthorizationSignatureHeader as n}from"../utils.mjs";import"@noble/curves/p256";import"@noble/hashes/sha256";import"canonicalize";import"../../constants.mjs";import"../../paths.mjs";class s{async signMessage(a){let s=t(a),r=e(a),o={};o=a.message instanceof Uint8Array?{message:Buffer.from(a.message).toString("hex"),encoding:"hex"}:{message:a.message,encoding:"utf-8"};let p={...r,method:"personal_sign",params:o},d=i(a),c=n({method:"POST",url:this.api.baseURL+s,body:p,appId:this.appId,idempotencyKeyHeader:d,authorizationPrivateKey:this.authorizationPrivateKey}),{data:h}=await this.api.post(s,p,{headers:{...c,...d}});return{signature:h.data.signature,encoding:h.data.encoding}}async secp256k1Sign(a){let s=t(a),r={...e(a),method:"secp256k1_sign",params:{hash:a.hash}},o=i(a),p=n({method:"POST",url:this.api.baseURL+s,body:r,appId:this.appId,idempotencyKeyHeader:o,authorizationPrivateKey:this.authorizationPrivateKey}),{data:d}=await this.api.post(s,r,{headers:{...p,...o}});return{signature:d.data.signature,encoding:d.data.encoding}}async signTypedData(a){let s=t(a),r={...e(a),method:"eth_signTypedData_v4",params:{typed_data:{primary_type:a.typedData.primaryType,domain:a.typedData.domain,types:a.typedData.types,message:a.typedData.message}}},o=i(a),p=n({method:"POST",url:this.api.baseURL+s,body:r,appId:this.appId,idempotencyKeyHeader:o,authorizationPrivateKey:this.authorizationPrivateKey}),{data:d}=await this.api.post(s,r,{headers:{...p,...o}});return{signature:d.data.signature,encoding:d.data.encoding}}async signTransaction(a){let s=t(a),r={...e(a),method:"eth_signTransaction",params:{transaction:{from:a.transaction.from,to:a.transaction.to,nonce:a.transaction.nonce,chain_id:a.transaction.chainId,data:a.transaction.data,value:a.transaction.value,type:a.transaction.type,gas_limit:a.transaction.gasLimit,gas_price:a.transaction.gasPrice,max_fee_per_gas:a.transaction.maxFeePerGas,max_priority_fee_per_gas:a.transaction.maxPriorityFeePerGas}}},o=i(a),p=n({method:"POST",url:this.api.baseURL+s,body:r,appId:this.appId,idempotencyKeyHeader:o,authorizationPrivateKey:this.authorizationPrivateKey}),{data:d}=await this.api.post(s,r,{headers:{...p,...o}});return{signedTransaction:d.data.signed_transaction,encoding:d.data.encoding}}async sendTransaction(s){let r=t(s),o={...e(s),method:"eth_sendTransaction",caip2:s.caip2,params:{transaction:{from:s.transaction.from,to:s.transaction.to,nonce:s.transaction.nonce,chain_id:s.transaction.chainId,data:s.transaction.data,value:s.transaction.value,type:s.transaction.type,gas_limit:s.transaction.gasLimit,gas_price:s.transaction.gasPrice,max_fee_per_gas:s.transaction.maxFeePerGas,max_priority_fee_per_gas:s.transaction.maxPriorityFeePerGas}}},p=i(s),d=n({method:"POST",url:this.api.baseURL+r,body:o,appId:this.appId,idempotencyKeyHeader:p,authorizationPrivateKey:this.authorizationPrivateKey}),{data:c}=await this.api.post(r,o,{headers:{...d,...p}});if(c.data)return{hash:c.data.hash,caip2:c.data.caip2};if(c.error)throw new a(c.error.code,null,c.error.message);throw Error("Unexpected API response to eth_sendTransaction")}constructor({appId:a,api:t,authorizationPrivateKey:e}){this.authorizationPrivateKey=null,this.api=t,this.appId=a,e&&(this.authorizationPrivateKey=e)}}export{s as EthereumRpcApi};
